import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from telethon import TelegramClient
from telethon.errors import FloodWaitError
import time

# üîê –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:
BOT_TOKEN = '7927213620:AAHJ68DsfyM8F3_k36HbIiJMMt1c88zQtXM'
OWNER_ID = 7620745738  # —Ç–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å
API_ID = 23283117
API_HASH = 'b25b0a34e0049f91795df9905c7a3a85'

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
tele_client = TelegramClient("session_rassylka", API_ID, API_HASH)

user_state = {}

@dp.message(Command("start"))
async def start(msg: Message):
    if msg.from_user.id != OWNER_ID:
        return await msg.answer("‚õî –¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞.")
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    user_state[msg.from_user.id] = {"step": "chats"}

@dp.message(F.text)
async def handle_input(msg: Message):
    if msg.from_user.id != OWNER_ID:
        return

    state = user_state.get(msg.from_user.id, {})

    if state.get("step") == "chats":
        state["chats"] = [x.strip() for x in msg.text.split(",")]
        state["step"] = "message"
        await msg.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

    elif state.get("step") == "message":
        state["message"] = msg.text
        state["step"] = "cooldown"
        await msg.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")

    elif state.get("step") == "cooldown":
        try:
            state["cooldown"] = float(msg.text)
        except:
            return await msg.answer("‚õî –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 2.5")

        await msg.answer("‚úÖ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        await start_rassylka(msg, state)

async def start_rassylka(msg, state):
    try:
        await tele_client.start()
    except Exception as e:
        return await msg.answer(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telethon: {e}")

    for chat in state["chats"]:
        try:
            await tele_client.send_message(chat, state["message"])
            await msg.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat}")
        except FloodWaitError as e:
            await msg.answer(f"‚è≥ FloodWait: –∂–¥—ë–º {e.seconds} —Å–µ–∫...")
            time.sleep(e.seconds)
        except Exception as e:
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {chat}: {e}")
        await asyncio.sleep(state["cooldown"])

    await msg.answer("üéâ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
